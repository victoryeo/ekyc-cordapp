This CorDapp is to model eKYC process using Corda blockchain.
*** Warning: It is a WIP ***

There are three main parts in the Corda app.
- state : the facts that are written to the ledger.
- contract : the constraints governing how states of a given type can evolve over time
- flow : the procedures for carrying out specific ekyc ledger updates
The requester will issue a kyc request to document owner.
The owner will respond with the document hash attached in the transaction.

The code is in :
contracts/src/main/java/com/template/contracts
contracts/src/main/java/com/template/states
and
workflows/src/main/java/com/template/flows

1) Build and deploy the nodes
In Ubuntu, run the command to build the code and deploy the nodes
./gradlew clean deployNodes
Running deployNodes will build the nodes under build/nodes.

2) Starting the nodes:
In Ubuntu, start the nodes by running the following command from the root of the project:
./build/nodes/runnodes

3) Interacting with the nodes:

In PartyA terminal, run the command: 
start KYCFlow kycName: "Tom", otherParty: "O=PartyB,L=New York,C=US"
to create an eKYC request to PartyB, to verify PartyB's name is "Tom". 
This single command will cause PartyB to automatically agree to eKYC request.
(Note: The argument has to be "O=PartyB,L=New York,C=US" because the value is hardcoded in build.gradle)

In PartyA or PartyB terminal, run the command:
run vaultQuery contractStateType: com.template.states.KYCState
This command checks the contents of each nodeâ€™s vault.
